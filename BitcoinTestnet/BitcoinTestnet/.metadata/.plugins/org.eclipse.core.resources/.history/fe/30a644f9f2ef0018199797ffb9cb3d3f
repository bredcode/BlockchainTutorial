package com.kau.bitcointest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.kau.bitcointest.database.BitcoinNodeDatabase;
import com.kau.bitcointest.node.NodeInterface;
import com.kau.bitcointest.terminal.CommandUtils;

@RestController
public class BitcoinRegtestController {
	private final String datadir = "/Users/jaewook/BitcoinUser/";	
	private ArrayList<NodeInterface> nodes = BitcoinNodeDatabase.getInstance().getNodeArray();
	
	//-----------------Count the number of blocks
	@RequestMapping("regtest/getblockcount") //블록 개수 확인
	public String getblockcount(@RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getblockcount");
	}
	
	@RequestMapping("regtest/getblockhash")
	public String getblockhash(@RequestParam("block_num") Integer block_num, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		System.out.println("[DEBUG]block_num:"+block_num);
		
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getblockhash "+block_num);
	}
	
	@RequestMapping("regtest/getblock")
	public String getblock(@RequestParam("block_hash") String block_hash, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		System.out.println("[DEBUG]block_hash:"+block_hash);
		
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getblock "+block_hash);
	}
	//-----------------Address Creation
	@RequestMapping("regtest/getnewaddress")
	public String getnewaddress(@RequestParam("name") String name, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) throws IOException, InterruptedException {
		System.out.println("[DEBUG]name:"+name);
		
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getnewaddress "+name);
	}
	
	@RequestMapping("regtest/getaddressinfo")
	public String getaddressinfo(@RequestParam("address")String address, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		System.out.println("[DEBUG]address:"+address);
		
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getaddressinfo "+address);
	}
	//-----------------Balance Checking
	
	@RequestMapping("regtest/getbalance")
	public String getbalance(@RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getbalance");
	}
	
	@RequestMapping("regtest/listunspent")
	public String listunspent(@RequestParam("addresses") String[] addresses, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		for(int i = 0; i < addresses.length; i++) {
			addresses[i] = "\\\""+addresses[i]+"\\\"";
		}
		String addresses_string = String.join(",", addresses);
		System.out.println("[DEBUG]addresses string:"+addresses_string);
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" listunspent 1 9999999 \"["+addresses_string+"]\"");
	}
	
	//----------------Transaction
	
	@RequestMapping("regtest/sendtoaddress")
	public String sendtoaddress(@RequestParam("to_address") String to_address, @RequestParam("btc") Float btc,@RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" sendtoaddress "+to_address+" "+btc);
	}
	@RequestMapping("regtest/gettransaction")
	public String gettransaction(@RequestParam("txid") String txid, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" gettransaction \""+txid+"\"");
	}
	@RequestMapping("regtest/getrawtransaction")
	public String getrawtransaction(@RequestParam("txid") String txid, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" getrawtransaction \""+txid+"\"");
	}
	@RequestMapping("regtest/decoderawtransaction")
	public String decoderawtransaction(@RequestParam("tx_hash") String tx_hash, @RequestParam("id") String id, @RequestParam("rpcport") Integer rpcport) {
		return CommandUtils.execute("bitcoin-cli -regtest -datadir="+datadir+id+"/"+" -rpcport="+rpcport+" decoderawtransaction \""+tx_hash+"\"");
	}
}
